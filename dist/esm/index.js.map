{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { registerPlugin } from '@capacitor/core';\n\nimport type {\n  NDEFMessagesTransformable,\n  NDEFWriteOptions,\n  NFCPlugin,\n  NFCPluginBasic,\n  PayloadType,\n  TagResultListenerFunc,\n  NFCError,\n  NDEFMessages\n} from './definitions';\n\nconst NFCPlug = registerPlugin<NFCPluginBasic>('NFC');\nexport * from './definitions';\n\nexport const NFC: NFCPlugin = {\n  isSupported: NFCPlug.isSupported.bind(NFCPlug),\n  startScan: NFCPlug.startScan.bind(NFCPlug),\n  onRead: (func: TagResultListenerFunc)=> NFC.wrapperListeners.push(func),\n  onWrite: ()=> NFCPlug.addListener(`nfcWriteSuccess`, () => Promise.resolve()),\n  onError: (errFunc: (error: NFCError) => void)=> NFCPlug.addListener(`nfcError`, errFunc),\n  removeAllListeners: NFCPlug.removeAllListeners.bind(NFCPlug),\n  wrapperListeners: [],\n\n  async writeNDEF<T extends PayloadType = Uint8Array>(options?: NDEFWriteOptions<T>): Promise<void> {\n    const ndefMessage: NDEFWriteOptions = {\n      records: options?.records.map(record => {\n        const payload: Uint8Array | null = typeof record.payload === \"string\"\n          ? (new TextEncoder()).encode(record.payload)\n          : Array.isArray(record.payload)\n            ? new Uint8Array(record.payload)\n            : record.payload instanceof Uint8Array\n              ? record.payload\n              : null;\n\n        if(!payload) throw(\"Unsupported payload type\")\n\n        return {\n          type: record.type,\n          payload\n        }\n      }) ?? [],\n    };\n\n    console.log(\"WRITING NDEF MESSAGE\", ndefMessage);\n    await NFCPlug.writeNDEF(ndefMessage)\n  }\n}\n\ntype DecodeSpecifier = \"b64\" | \"string\" | \"uint8Array\" | \"numberArray\";\ntype decodedType<T extends DecodeSpecifier> = NDEFMessages<T extends \"b64\" ? string : T extends \"string\" ? string : T extends \"uint8Array\" ? Uint8Array : number[]>\nconst decodeBase64 = (base64Payload: string)=> {\n  console.log(\"DECODING BASE64\", base64Payload, atob(base64Payload)\n    .split('')\n    .map((char) => char.charCodeAt(0)));\n  return atob(base64Payload)\n    .split('')\n    .map((char) => char.charCodeAt(0));\n}\nconst mapPayloadTo = <T extends DecodeSpecifier>(type: T, data: NDEFMessages): decodedType<T> => {\n  return {\n    messages: data.messages.map(message => ({\n      records: message.records.map(record => ({\n        type: record.type,\n        payload:\n          type === \"b64\"\n            ? record.payload\n            :type === \"string\"\n              ? decodeBase64(record.payload)\n              : type === \"uint8Array\"\n                ? new Uint8Array(decodeBase64(record.payload))\n                : type === \"numberArray\"\n                  ? Array.from(decodeBase64(record.payload))\n                  : record.payload\n      }))\n    }))\n  } as decodedType<T>\n}\n\nNFCPlug.addListener(`nfcTag`, data=> {\n  console.log(\"GOT DATA\", data);\n  const wrappedData: NDEFMessagesTransformable = {\n    strings() {\n      return mapPayloadTo(\"string\", data)\n    },\n    uint8Arrays() {\n      return mapPayloadTo(\"uint8Array\", data)\n    },\n    numberArrays() {\n      return mapPayloadTo(\"numberArray\", data)\n    }\n  }\n\n  for(const listener of NFC.wrapperListeners) {\n    console.log(\"CALLING LISTENER WITH\", wrappedData)\n    listener(wrappedData);\n  }\n})"]}