{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AASjD,MAAM,OAAO,GAAG,cAAc,CAAiB,KAAK,CAAC,CAAC;AACtD,cAAc,eAAe,CAAC;AAE9B,MAAM,CAAC,MAAM,GAAG,GAAc;IAC5B,WAAW,EAAE,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC;IAC9C,SAAS,EAAE,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC;IAC1C,WAAW,EAAE,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC;IAC9C,kBAAkB,EAAE,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC;IAE5D,KAAK,CAAC,SAAS,CAAoD,OAA6B;;QAC9F,MAAM,WAAW,GAAqB;YACpC,OAAO,QAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;gBACrC,MAAM,OAAO,GAAW,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ;oBACxD,CAAC,CAAC,MAAM,CAAC,OAAO;oBAChB,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC7B,CAAC,CAAC,CAAC,IAAI,WAAW,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,OAAmB,CAAC,CAAC;wBACxE,CAAC,CAAC,CAAC,IAAI,WAAW,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAqB,CAAC,CAAC;gBAC/D,OAAO;oBACL,IAAI,EAAE,MAAM,CAAC,IAAI;oBACjB,OAAO;iBACR,CAAA;YACH,CAAC,oCAAK,EAAE;SACT,CAAC;QAEF,MAAM,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,CAAA;IACtC,CAAC;IAED,oBAAoB,CAAC,MAAmB;;QACtC,OAAO,IAAI,UAAU,OAAC,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO,mCAAI,EAAE,CAAC,CAAC;IAC/C,CAAC;IACD,aAAa,CAAC,MAAmB;QAC/B,OAAO,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC;IACpE,CAAC;CACF,CAAA","sourcesContent":["import { registerPlugin } from '@capacitor/core';\n\nimport type {\n  NDEFRecord,\n  NDEFWriteOptions,\n  NFCPlugin,\n  NFCPluginBasic\n} from './definitions';\n\nconst NFCPlug = registerPlugin<NFCPluginBasic>('NFC');\nexport * from './definitions';\n\nexport const NFC: NFCPlugin = {\n  isSupported: NFCPlug.isSupported.bind(NFCPlug),\n  startScan: NFCPlug.startScan.bind(NFCPlug),\n  addListener: NFCPlug.addListener.bind(NFCPlug),\n  removeAllListeners: NFCPlug.removeAllListeners.bind(NFCPlug),\n\n  async writeNDEF<T extends string | number[] | Uint8Array = string>(options?: NDEFWriteOptions<T>): Promise<void> {\n    const ndefMessage: NDEFWriteOptions = {\n      records: options?.records.map(record => {\n        const payload: string = typeof record.payload === \"string\"\n          ? record.payload\n          : Array.isArray(record.payload)\n            ? (new TextDecoder()).decode(new Uint8Array(record.payload as number[]))\n            : (new TextDecoder()).decode(record.payload as Uint8Array);\n        return {\n          type: record.type,\n          payload\n        }\n      }) ?? [],\n    };\n\n    await NFCPlug.writeNDEF(ndefMessage)\n  },\n\n  getUint8ArrayPayload(record?: NDEFRecord): Uint8Array {\n    return new Uint8Array(record?.payload ?? []);\n  },\n  getStrPayload(record?: NDEFRecord): string {\n    return new TextDecoder().decode(NFC.getUint8ArrayPayload(record));\n  }\n}\n"]}