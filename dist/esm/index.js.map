{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AASjD,MAAM,OAAO,GAAG,cAAc,CAAiB,KAAK,CAAC,CAAC;AACtD,cAAc,eAAe,CAAC;AAE9B,MAAM,CAAC,MAAM,GAAG,GAAc;IAC5B,WAAW,EAAE,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC;IAC9C,SAAS,EAAE,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC;IAC1C,WAAW,EAAE,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC;IAC9C,kBAAkB,EAAE,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC;IAE5D,KAAK,CAAC,SAAS,CAAqC,OAA6B;;QAC/E,MAAM,WAAW,GAAqB;YACpC,OAAO,QAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;gBACrC,MAAM,OAAO,GAAsB,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ;oBACnE,CAAC,CAAC,CAAC,IAAI,WAAW,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC;oBAC5C,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC;wBAC7B,CAAC,CAAC,IAAI,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC;wBAChC,CAAC,CAAC,MAAM,CAAC,OAAO,YAAY,UAAU;4BACpC,CAAC,CAAC,MAAM,CAAC,OAAO;4BAChB,CAAC,CAAC,IAAI,CAAC;gBAEb,IAAG,CAAC,OAAO;oBAAE,MAAK,CAAC,0BAA0B,CAAC,CAAA;gBAE9C,OAAO;oBACL,IAAI,EAAE,MAAM,CAAC,IAAI;oBACjB,OAAO;iBACR,CAAA;YACH,CAAC,oCAAK,EAAE;SACT,CAAC;QAEF,MAAM,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,CAAA;IACtC,CAAC;IAED,aAAa,CAAC,MAAmB;QAC/B,OAAO,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO,CAAC,CAAC;IACnD,CAAC;CACF,CAAA","sourcesContent":["import { registerPlugin } from '@capacitor/core';\n\nimport type {\n  NDEFRecord,\n  NDEFWriteOptions,\n  NFCPlugin,\n  NFCPluginBasic, PayloadType,\n} from './definitions';\n\nconst NFCPlug = registerPlugin<NFCPluginBasic>('NFC');\nexport * from './definitions';\n\nexport const NFC: NFCPlugin = {\n  isSupported: NFCPlug.isSupported.bind(NFCPlug),\n  startScan: NFCPlug.startScan.bind(NFCPlug),\n  addListener: NFCPlug.addListener.bind(NFCPlug),\n  removeAllListeners: NFCPlug.removeAllListeners.bind(NFCPlug),\n\n  async writeNDEF<T extends PayloadType = Uint8Array>(options?: NDEFWriteOptions<T>): Promise<void> {\n    const ndefMessage: NDEFWriteOptions = {\n      records: options?.records.map(record => {\n        const payload: Uint8Array | null = typeof record.payload === \"string\"\n          ? (new TextEncoder()).encode(record.payload)\n          : Array.isArray(record.payload)\n            ? new Uint8Array(record.payload)\n            : record.payload instanceof Uint8Array\n              ? record.payload\n              : null;\n\n        if(!payload) throw(\"Unsupported payload type\")\n\n        return {\n          type: record.type,\n          payload\n        }\n      }) ?? [],\n    };\n\n    await NFCPlug.writeNDEF(ndefMessage)\n  },\n\n  getStrPayload(record?: NDEFRecord): string {\n    return new TextDecoder().decode(record?.payload);\n  }\n}\n"]}