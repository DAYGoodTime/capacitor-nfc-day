{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface NFCPluginBasic {\n  /**\n   * Checks if NFC is supported on the device. Returns true on all iOS devices, and checks for support on Android.\n   */\n  isSupported(): Promise<{ supported: boolean }>;\n\n  startScan(): Promise<void>;\n\n  /**\n   * Writes an NDEF message to an NFC tag.\n   * @param options The NDEF message to write.\n   */\n  writeNDEF(options: NDEFWriteOptions): Promise<void>;\n\n  /**\n   * Adds a listener for NFC tag detection events.\n   * @param eventName The name of the event ('nfcTag').\n   * @param listenerFunc The function to call when an NFC tag is detected.\n   */\n  addListener(\n    eventName: 'nfcTag',\n    listenerFunc: (data: NDEFMessages) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Adds a listener for NFC tag write events.\n   * @param eventName The name of the event ('nfcWriteSuccess').\n   * @param listenerFunc The function to call when an NFC tag is written.\n   */\n  addListener(\n    eventName: 'nfcWriteSuccess',\n    listenerFunc: () => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Adds a listener for NFC error events.\n   * @param eventName The name of the event ('nfcError').\n   * @param listenerFunc The function to call when an NFC error occurs.\n   */\n  addListener(\n    eventName: 'nfcError',\n    listenerFunc: (error: NFCError) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  /**\n   * Removes all listeners for the specified event.\n   * @param eventName The name of the event.\n   */\n  removeAllListeners(eventName: 'nfcTag' | 'nfcError'): Promise<void>;\n}\n\nexport interface NDEFMessages {\n  messages: NDEFMessage[];\n}\n\nexport interface NDEFMessage {\n  records: NDEFRecord[];\n}\n\nexport interface NDEFRecord<T = number[]> {\n  /**\n   * The type of the record.\n   */\n  type: string;\n\n  /**\n   * The payload of the record.\n   */\n  payload: T;\n}\n\nexport interface NFCError {\n  /**\n   * The error message.\n   */\n  error: string;\n}\n\nexport interface NDEFWriteOptions<T = string> {\n  records: NDEFRecord<T>[];\n}\n\nexport interface NFCPlugin extends Omit<NFCPluginBasic, \"writeNDEF\"> {\n  writeNDEF: <T extends string | number[] | Uint8Array = string>(record?: NDEFWriteOptions<T>) => Promise<void>;\n  getUint8ArrayPayload: (record?: NDEFRecord) => Uint8Array;\n  getStrPayload: (record?: NDEFRecord) => string;\n}"]}